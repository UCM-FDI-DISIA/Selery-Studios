#include "PortalComponent2.h"
#include "../states/TopDownState.h"
PortalComponent::PortalComponent() {

}
void PortalComponent::init() {
	//coge el transform del juegador
	trPlayer_ = static_cast<TopDownState*> (mngr_)->getplayer()->getComponent<Transform>(TRANSFORM_H);
}



void PortalComponent::elementEarned() {
	++elementsCollected;
	cout << "Elemento recogido";
	if (elementsCollected == 3) {
		ent_->addComponent<CheckCollision>(CHECKCOLLISION_H, static_cast<TopDownState*> (mngr_)->getplayer(), "portal");
	}
}

void PortalComponent::Teleport(Vector2D newPlayerPos) {
	trPlayer_->setPos(newPlayerPos);
}






#pragma once
#include "../utils/Component.h"
#include "../utils/Vector2D.h"
#include "Transform.h"
class PortalComponent : public Component
{
private:
	Transform* trPlayer_;
	int nframes = 1;
	int elementsCollected = 0;
public:
	PortalComponent();
	void init();
	void update() {};
	virtual ~PortalComponent() {};
	void elementEarned();
	void Teleport(Vector2D newPlayerPos);


};
